# -*- coding: utf-8 -*-
"""S.Gowri Shankar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J2PGhquZ8xRUxfdJSKkiPE7lfFH4Iru4
"""

import json
import os

TODO_FILE = 'todo_list.json'

# Load the to-do list from a file or return an empty list if the file doesn't exist
def load_todos():
    if not os.path.exists(TODO_FILE):
        return []
    with open(TODO_FILE, 'r') as file:
        return json.load(file)

# Save the to-do list to a file
def save_todos(todos):
    with open(TODO_FILE, 'w') as file:
        json.dump(todos, file, indent=4)

# Add a new task to the to-do list
def add_todo():
    task = input("Enter the task: ").strip()
    if task:
        todos.append({'task': task, 'completed': False})
        save_todos(todos)
        print(f'Task "{task}" added!')
    else:
        print("Task cannot be empty.")

# List all tasks with their status
def list_todos():
    if not todos:
        print("No tasks available.")
    else:
        print("\nYour To-Do List:")
        for idx, todo in enumerate(todos, start=1):
            status = "✔" if todo['completed'] else "✘"
            print(f"{idx}. [{status}] {todo['task']}")
        print()  # Extra new line for better spacing

# Mark a task as completed by task number
def mark_completed():
    list_todos()
    try:
        task_num = int(input("Enter the task number to mark as completed: "))
        if 1 <= task_num <= len(todos):
            todos[task_num - 1]['completed'] = True
            save_todos(todos)
            print(f"Task {task_num} marked as completed!")
        else:
            print("Invalid task number.")
    except ValueError:
        print("Please enter a valid number.")

# Delete a task from the list by task number
def delete_todo():
    list_todos()
    try:
        task_num = int(input("Enter the task number to delete: "))
        if 1 <= task_num <= len(todos):
            deleted_task = todos.pop(task_num - 1)
            save_todos(todos)
            print(f'Task "{deleted_task["task"]}" deleted!')
        else:
            print("Invalid task number.")
    except ValueError:
        print("Please enter a valid number.")

# Display the menu of options
def menu():
    print("\nTo-Do List Menu:")
    print("1. Add a task")
    print("2. List all tasks")
    print("3. Mark a task as completed")
    print("4. Delete a task")
    print("5. Exit")

todos = load_todos()

# Main loop to display the menu and handle user input
while True:
    menu()
    choice = input("\nEnter your choice: ").strip()

    if choice == '1':
        add_todo()
    elif choice == '2':
        list_todos()
    elif choice == '3':
        mark_completed()
    elif choice == '4':
        delete_todo()
    elif choice == '5':
        print("Goodbye!")
        break
    else:
        print("Invalid choice. Please enter a number between 1 and 5.")

# Simple Calculator

# Function to perform calculation
def calculate(num1, num2, operation):
    if operation == '+':
        return num1 + num2
    elif operation == '-':
        return num1 - num2
    elif operation == '*':
        return num1 * num2
    elif operation == '/':
        if num2 == 0:
            return "Error! Division by zero."
        return num1 / num2
    else:
        return "Invalid operation!"

# Main function
def calculator():
    print("Welcome to the Simple Calculator")

    try:
        # Get user input for numbers
        num1 = float(input("Enter the first number: "))
        num2 = float(input("Enter the second number: "))
    except ValueError:
        print("Invalid input! Please enter valid numbers.")
        return

    # Get user input for operation
    print("Choose an operation: +, -, *, /")
    operation = input("Enter the operation: ")

    # Perform the calculation and display the result
    result = calculate(num1, num2, operation)
    print(f"The result of {num1} {operation} {num2} is: {result}")

# Run the calculator
if __name__ == "__main__":
    calculator()

import random
import string

# Function to generate a password
def generate_password(length):
    if length < 4:
        return "Password length should be at least 4 to ensure complexity."

    # Define the characters to use: letters, digits, and special characters
    characters = string.ascii_letters + string.digits + string.punctuation

    # Generate a random password
    password = ''.join(random.choice(characters) for i in range(length))

    return password

# Main function
def password_generator():
    print("Welcome to the Password Generator!")

    try:
        # Get user input for password length
        length = int(input("Enter the desired length of the password (minimum 4): "))
    except ValueError:
        print("Invalid input! Please enter a valid number.")
        return

    # Generate and display the password
    password = generate_password(length)
    print(f"Generated Password: {password}")

# Run the password generator
if __name__ == "__main__":
    password_generator()

import random
# Define valid options for the game
options = ["rock", "paper", "scissors"]
def get_computer_choice():
    # Randomly select between rock, paper, and scissors for the computer
    return random.choice(options)
def get_user_choice():
    while True:
        user_choice = input("Choose rock, paper, or scissors: ").lower()
        if user_choice in options:
            return user_choice
        else:
            print("Invalid choice! Please choose either rock, paper, or scissors.")
def determine_winner(user, computer):
    if user == computer:
        return "It's a tie!"
    elif (user == "rock" and computer == "scissors") or \
         (user == "scissors" and computer == "paper") or \
         (user == "paper" and computer == "rock"):
        return "You win!"
    else:
        return "You lose!"
def play_round():
    user_choice = get_user_choice()
    computer_choice = get_computer_choice()
    print(f"\nYou chose: {user_choice}")
    print(f"The computer chose: {computer_choice}")
    result = determine_winner(user_choice, computer_choice)
    print(result)
    return result
def game():
    user_score = 0
    computer_score = 0
    while True:
        print("\n--- Rock, Paper, Scissors ---")
        result = play_round()
        if result == "You win!":
            user_score += 1
        elif result == "You lose!":
            computer_score += 1
        print(f"\nScore: You {user_score} - {computer_score} Computer")
        play_again = input("\nDo you want to play again? (yes/no): ").lower()
        if play_again != "yes":
            print("Thanks for playing!")
            break
if __name__ == "__main__":
    game()

# Contact Management System
# Global list to store contacts
contacts = []
# Contact structure
class Contact:
    def __init__(self, store_name, phone_number, email, address):
        self.store_name = store_name
        self.phone_number = phone_number
        self.email = email
        self.address = address
    def __str__(self):
        return f"Store Name: {self.store_name}\nPhone Number: {self.phone_number}\nEmail: {self.email}\nAddress: {self.address}"

# Add a new contact
def add_contact():
    store_name = input("Enter store name: ")
    phone_number = input("Enter phone number: ")
    email = input("Enter email address: ")
    address = input("Enter physical address: ")
    new_contact = Contact(store_name, phone_number, email, address)
    contacts.append(new_contact)
    print("\nContact added successfully!\n")

# View all contacts
def view_contacts():
    if not contacts:
        print("\nNo contacts available.\n")
    else:
        print("\nContact List:")
        for i, contact in enumerate(contacts):
            print(f"{i + 1}. {contact.store_name} - {contact.phone_number}")
        print("\n")
# Search for a contact by name or phone number
def search_contact():
    query = input("Enter name or phone number to search: ")
    found = False
    for contact in contacts:
        if query.lower() in contact.store_name.lower() or query in contact.phone_number:
            print(f"\nContact Found:\n{contact}")
            found = True
            break
    if not found:
        print("\nNo contact found with that information.\n")
# Update a contact
def update_contact():
    view_contacts()
    try:
        contact_index = int(input("Enter the contact number you want to update: ")) - 1
        if 0 <= contact_index < len(contacts):
            contact = contacts[contact_index]
            print(f"\nUpdating Contact: {contact.store_name}")
            contact.store_name = input("Enter new store name: ")
            contact.phone_number = input("Enter new phone number: ")
            contact.email = input("Enter new email address: ")
            contact.address = input("Enter new physical address: ")
            print("\nContact updated successfully!\n")
        else:
            print("Invalid contact number!")
    except ValueError:
        print("Invalid input! Please enter a valid number.")
# Delete a contact
def delete_contact():
    view_contacts()
    try:
        contact_index = int(input("Enter the contact number you want to delete: ")) - 1
        if 0 <= contact_index < len(contacts):
            del contacts[contact_index]
            print("\nContact deleted successfully!\n")
        else:
            print("Invalid contact number!")
    except ValueError:
        print("Invalid input! Please enter a valid number.")
# User interface with menu options
def user_interface():
    while True:
        print("\nContact Management System")
        print("1. Add New Contact")
        print("2. View Contact List")
        print("3. Search Contact")
        print("4. Update Contact")
        print("5. Delete Contact")
        print("6. Exit")
        choice = input("Choose an option (1-6): ")

        if choice == '1':
            add_contact()
        elif choice == '2':
            view_contacts()
        elif choice == '3':
            search_contact()
        elif choice == '4':
            update_contact()
        elif choice == '5':
            delete_contact()
        elif choice == '6':
            print("Exiting the program. Goodbye!")
            break
        else:
            print("Invalid choice! Please select a valid option.")
# Run the contact management system
if __name__ == "__main__":
    user_interface()